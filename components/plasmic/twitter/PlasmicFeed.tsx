// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aFz13zrZNw9JGADAhhatpj
// Component: QjjT1dEouSW_e
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import ActionButton from "../../ActionButton"; // plasmic-import: ZpCVL7g4OHZGW/component
import Spacer from "../../Spacer"; // plasmic-import: Hz-URpgSaVUFtD/component
import Avatar from "../../Avatar"; // plasmic-import: FzylRzkfDw3kPz/component
import Button from "../../Button"; // plasmic-import: G08annlMfaLvq3/component
import Tweet from "../../Tweet"; // plasmic-import: 8VEl9IDGpHWz4k/component
import SideSection from "../../SideSection"; // plasmic-import: IkJ0AzaSdV5HUK/component
import Trend from "../../Trend"; // plasmic-import: NhF1VMElueaCTz/component
import Suggestion from "../../Suggestion"; // plasmic-import: kM7BCkaFGX9eEG/component

import { useScreenVariants as useScreenVariantshKkMtWeWdPQwTf } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: hKkMTWeWdPQwTf/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_twitter.module.css"; // plasmic-import: aFz13zrZNw9JGADAhhatpj/projectcss
import sty from "./PlasmicFeed.module.css"; // plasmic-import: QjjT1dEouSW_e/css

import MagicIcon from "./icons/PlasmicIcon__Magic"; // plasmic-import: RAzlx5aZyl2vU7/icon
import TwitterIcon from "./icons/PlasmicIcon__Twitter"; // plasmic-import: 0F_zf4paLbcfJe/icon
import HomeActiveIcon from "./icons/PlasmicIcon__HomeActive"; // plasmic-import: ihRVnRsXi7K9Sf/icon
import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: YCtsJQRkoXUVTN/icon
import NotificationsIcon from "./icons/PlasmicIcon__Notifications"; // plasmic-import: SHQO1hepQ7BUld/icon
import MessagesIcon from "./icons/PlasmicIcon__Messages"; // plasmic-import: -ui6x58scOik9y/icon
import BookmarksIcon from "./icons/PlasmicIcon__Bookmarks"; // plasmic-import: apwCHckv0Mkbhz/icon
import ListsIcon from "./icons/PlasmicIcon__Lists"; // plasmic-import: XMC3oNfF7Ai0Ah/icon
import ProfileIcon from "./icons/PlasmicIcon__Profile"; // plasmic-import: ZScibYmb6CNiqD/icon
import MoreIcon from "./icons/PlasmicIcon__More"; // plasmic-import: KS5vW7J-6yaXBk/icon
import PictureIcon from "./icons/PlasmicIcon__Picture"; // plasmic-import: pmgJPAniT3k_g-/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: 2QVxgWQfymmdLC/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: u3jT_HZwT9d8la/icon
import Icon5Icon from "./icons/PlasmicIcon__Icon5"; // plasmic-import: ChQXRbF-lMyxV7/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: c8tuV7y1u8KAdK/icon
import SearchIcon from "./icons/PlasmicIcon__Search"; // plasmic-import: 0eTdHBXdwCrSef/icon

export type PlasmicFeed__VariantMembers = {};

export type PlasmicFeed__VariantsArgs = {};
type VariantPropType = keyof PlasmicFeed__VariantsArgs;
export const PlasmicFeed__VariantProps = new Array<VariantPropType>();

export type PlasmicFeed__ArgsType = {};
type ArgPropType = keyof PlasmicFeed__ArgsType;
export const PlasmicFeed__ArgProps = new Array<ArgPropType>();

export type PlasmicFeed__OverridesType = {
  root?: p.Flex<"div">;
  avatar?: p.Flex<typeof Avatar>;
  newTweetInput?: p.Flex<"textarea">;
  tweetButton?: p.Flex<typeof Button>;
  tweetList?: p.Flex<"div">;
  searchInput?: p.Flex<"input">;
};

export interface DefaultFeedProps {}

function PlasmicFeed__RenderFunc(props: {
  variants: PlasmicFeed__VariantsArgs;
  args: PlasmicFeed__ArgsType;
  overrides: PlasmicFeed__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantshKkMtWeWdPQwTf()
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox___61TbA)}>
            <div className={classNames(projectcss.all, sty.freeBox__nwK6N)}>
              {(
                hasVariant(globalVariants, "screen", "desktop") ? false : true
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__s3CzU)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__aoNba)}
                  >
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__rkFnn)}
                      displayHeight={"30px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"30px" as const}
                      src={{
                        src: "/plasmic/twitter/images/image2.png",
                        fullWidth: 225,
                        fullHeight: 223,
                        aspectRatio: undefined
                      }}
                    />
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__so60E
                    )}
                  >
                    {"Home"}
                  </div>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton___1UdZl
                    )}
                    options={["medium", "primary"]}
                    slot={"25"}
                  >
                    <MagicIcon
                      className={classNames(projectcss.all, sty.svg__jOj9B)}
                      role={"img"}
                    />
                  </ActionButton>
                </div>
              ) : null}
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : false
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__e2VM)}>
                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__dtMsz
                    )}
                    options={["primary", "large"]}
                    slot={"25"}
                  >
                    <TwitterIcon
                      className={classNames(projectcss.all, sty.svg__fEaFs)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__g1KhT
                    )}
                    options={["primary", "large"]}
                    slot={"25"}
                  >
                    <HomeActiveIcon
                      className={classNames(projectcss.all, sty.svg__vuPCr)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__lBag6
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <Icon2Icon
                      className={classNames(projectcss.all, sty.svg__gyUSv)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__bdW0N
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <NotificationsIcon
                      className={classNames(projectcss.all, sty.svg__xm2J)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__mt2M3
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <MessagesIcon
                      className={classNames(projectcss.all, sty.svg___7BdMb)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton___6WxlA
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <BookmarksIcon
                      className={classNames(projectcss.all, sty.svg__bh1Hv)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__d7Xc1
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <ListsIcon
                      className={classNames(projectcss.all, sty.svg__tZjSz)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__ba9Tg
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <ProfileIcon
                      className={classNames(projectcss.all, sty.svg___7LnFg)}
                      role={"img"}
                    />
                  </ActionButton>

                  <ActionButton
                    className={classNames(
                      "__wab_instance",
                      sty.actionButton__rZkO1
                    )}
                    options={["large"]}
                    slot={"25"}
                  >
                    <MoreIcon
                      className={classNames(projectcss.all, sty.svg___844L)}
                      role={"img"}
                    />
                  </ActionButton>
                </div>
              ) : null}
            </div>

            <div className={classNames(projectcss.all, sty.freeBox__s1Wju)}>
              {(
                hasVariant(globalVariants, "screen", "desktop") ? true : false
              ) ? (
                <div className={classNames(projectcss.all, sty.freeBox__yHbKz)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__mABeE)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ef73C
                      )}
                    >
                      {"Home"}
                    </div>

                    <Spacer
                      className={classNames(
                        "__wab_instance",
                        sty.spacer__iuCzV
                      )}
                    />

                    <ActionButton
                      className={classNames(
                        "__wab_instance",
                        sty.actionButton__uF4SC
                      )}
                      options={["medium", "primary"]}
                      slot={"25"}
                    >
                      <MagicIcon
                        className={classNames(projectcss.all, sty.svg__i5Dsh)}
                        role={"img"}
                      />
                    </ActionButton>
                  </div>

                  <div
                    className={classNames(projectcss.all, sty.freeBox__fcyMx)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__x5CDs)}
                    >
                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__dYjV
                        )}
                      >
                        <Avatar
                          data-plasmic-name={"avatar"}
                          data-plasmic-override={overrides.avatar}
                          className={classNames("__wab_instance", sty.avatar)}
                        />
                      </p.Stack>
                    </p.Stack>

                    <div
                      className={classNames(projectcss.all, sty.freeBox__sNqfC)}
                    >
                      <textarea
                        data-plasmic-name={"newTweetInput"}
                        data-plasmic-override={overrides.newTweetInput}
                        className={classNames(
                          projectcss.all,
                          projectcss.textarea,
                          sty.newTweetInput
                        )}
                        placeholder={"What's happening?" as const}
                        rows={1 as const}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__b7CkM
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__dRwgh
                          )}
                        >
                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton___3Ls4T
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <PictureIcon
                              className={classNames(
                                projectcss.all,
                                sty.svg__xbN0L
                              )}
                              role={"img"}
                            />
                          </ActionButton>

                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton___8Ug3I
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <Icon3Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__rom16
                              )}
                              role={"img"}
                            />
                          </ActionButton>

                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton__vso97
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <Icon4Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__sU7L8
                              )}
                              role={"img"}
                            />
                          </ActionButton>

                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton__yXBsl
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <Icon5Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__tuCrO
                              )}
                              role={"img"}
                            />
                          </ActionButton>

                          <ActionButton
                            className={classNames(
                              "__wab_instance",
                              sty.actionButton___9Oj9Q
                            )}
                            options={["medium", "primary"]}
                            slot={"25"}
                          >
                            <Icon7Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__tHc1
                              )}
                              role={"img"}
                            />
                          </ActionButton>
                        </p.Stack>

                        <Spacer
                          className={classNames(
                            "__wab_instance",
                            sty.spacer__bttJs
                          )}
                        />

                        <Button
                          data-plasmic-name={"tweetButton"}
                          data-plasmic-override={overrides.tweetButton}
                          className={classNames(
                            "__wab_instance",
                            sty.tweetButton
                          )}
                          options={["primary"]}
                        >
                          {"Tweet"}
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              ) : null}

              <div
                data-plasmic-name={"tweetList"}
                data-plasmic-override={overrides.tweetList}
                className={classNames(projectcss.all, sty.tweetList)}
              >
                <Tweet
                  className={classNames("__wab_instance", sty.tweet__zd6Eb)}
                />

                <Tweet
                  className={classNames("__wab_instance", sty.tweet___1FfJz)}
                  name={"Cassidy Williams"}
                  photo={
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__huaoW)}
                      displayHeight={"49px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"49px" as const}
                      src={{
                        src: "/plasmic/twitter/images/image4.png",
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  username={"@cassidoo"}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__sqYtM)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ym9CW
                      )}
                    >
                      {"A new issue is coming your way, check your inbox!!"}
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__epu3A)}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__ozTcU)}
                        displayHeight={"140px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"140px" as const}
                        src={{
                          src: "/plasmic/twitter/images/image5.png",
                          fullWidth: 240,
                          fullHeight: 240,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__mQeNz
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__iYpXq
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"rendezvous with cassidoo"}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__cAyAo
                          )}
                        >
                          {"probably the best newsletter you'll ever read"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text___1UUu1
                          )}
                        >
                          {"cassidoo.co"}
                        </div>
                      </div>
                    </p.Stack>
                  </p.Stack>
                </Tweet>

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__m8USm)}
                  name={"Max Stoiber"}
                  photo={
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img___4Qlz2)}
                      displayHeight={"49px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"49px" as const}
                      src={{
                        src: "/plasmic/twitter/images/image7.png",
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  username={"@mxstbr"}
                >
                  {
                    "Tell me you're a React developer without telling me you're a React developer."
                  }
                </Tweet>

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__kJDtA)}
                />

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__oHyIf)}
                  name={"Cassidy Williams"}
                  photo={
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__j3L3A)}
                      displayHeight={"49px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"49px" as const}
                      src={{
                        src: "/plasmic/twitter/images/image4.png",
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  username={"@cassidoo"}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__yH3Hh)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___684B
                      )}
                    >
                      {"A new issue is coming your way, check your inbox!!"}
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___0PhKx
                      )}
                    >
                      <p.PlasmicImg
                        alt={""}
                        className={classNames(sty.img__ap2Br)}
                        displayHeight={"140px" as const}
                        displayMaxHeight={"none" as const}
                        displayMaxWidth={"none" as const}
                        displayMinHeight={"0" as const}
                        displayMinWidth={"0" as const}
                        displayWidth={"140px" as const}
                        src={{
                          src: "/plasmic/twitter/images/image5.png",
                          fullWidth: 240,
                          fullHeight: 240,
                          aspectRatio: undefined
                        }}
                      />

                      <div
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__jqgyE
                        )}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__ptYFo
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"rendezvous with cassidoo"}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__jCmMp
                          )}
                        >
                          {"probably the best newsletter you'll ever read"}
                        </div>

                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xp2R3
                          )}
                        >
                          {"cassidoo.co"}
                        </div>
                      </div>
                    </p.Stack>
                  </p.Stack>
                </Tweet>

                <Tweet
                  className={classNames("__wab_instance", sty.tweet__fywuU)}
                  name={"Max Stoiber"}
                  photo={
                    <p.PlasmicImg
                      alt={""}
                      className={classNames(sty.img__ngYFj)}
                      displayHeight={"49px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"none" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"49px" as const}
                      src={{
                        src: "/plasmic/twitter/images/image7.png",
                        fullWidth: 400,
                        fullHeight: 400,
                        aspectRatio: undefined
                      }}
                    />
                  }
                  username={"@mxstbr"}
                >
                  {
                    "Tell me you're a React developer without telling me you're a React developer."
                  }
                </Tweet>
              </div>
            </div>

            {(
              hasVariant(globalVariants, "screen", "desktop") ? true : false
            ) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___8L3Wv)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__uPzg5)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__varYd)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3M2J1
                      )}
                    >
                      <SearchIcon
                        className={classNames(projectcss.all, sty.svg__hyk2M)}
                        role={"img"}
                      />
                    </div>

                    <input
                      data-plasmic-name={"searchInput"}
                      data-plasmic-override={overrides.searchInput}
                      className={classNames(
                        projectcss.all,
                        projectcss.input,
                        sty.searchInput
                      )}
                      placeholder={"Search Twitter" as const}
                      size={1 as const}
                      type={"text" as const}
                    />
                  </div>
                </div>

                <SideSection
                  className={classNames(
                    "__wab_instance",
                    sty.sideSection__uYuka
                  )}
                  slot={
                    <React.Fragment>
                      <Trend
                        className={classNames(
                          "__wab_instance",
                          sty.trend__ydQMe
                        )}
                        slot={"Entertainment"}
                      >
                        {
                          "Adele shares photo supporting Beyoncé's Black is King"
                        }
                      </Trend>

                      <Trend
                        className={classNames(
                          "__wab_instance",
                          sty.trend__fcBr
                        )}
                        slot={"COVID-19"}
                      >
                        {
                          "Thousands march in Berlin to protest COVID-19 restrictions"
                        }
                      </Trend>

                      <Trend
                        className={classNames(
                          "__wab_instance",
                          sty.trend___8NpcU
                        )}
                        slot={"World nenws"}
                      >
                        {
                          "Russia banned from using its name, flag and anthem at the next two Olympic Games"
                        }
                      </Trend>
                    </React.Fragment>
                  }
                />

                <SideSection
                  className={classNames(
                    "__wab_instance",
                    sty.sideSection__otfXl
                  )}
                  slot={
                    <React.Fragment>
                      <Suggestion
                        className={classNames(
                          "__wab_instance",
                          sty.suggestion__y0Da
                        )}
                        slot={"Mark Dalgleish      "}
                        slot2={"@markdalgleish"}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img__hvDf6)}
                          displayHeight={"49px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"49px" as const}
                          src={{
                            src: "/plasmic/twitter/images/image6.png",
                            fullWidth: 400,
                            fullHeight: 400,
                            aspectRatio: undefined
                          }}
                        />
                      </Suggestion>

                      <Suggestion
                        className={classNames(
                          "__wab_instance",
                          sty.suggestion__zi4S
                        )}
                        slot={"Guillermo Rauch  "}
                        slot2={"@rauchg"}
                      >
                        <p.PlasmicImg
                          alt={""}
                          className={classNames(sty.img___8OGiq)}
                          displayHeight={"49px" as const}
                          displayMaxHeight={"none" as const}
                          displayMaxWidth={"none" as const}
                          displayMinHeight={"0" as const}
                          displayMinWidth={"0" as const}
                          displayWidth={"49px" as const}
                          src={{
                            src: "/plasmic/twitter/images/image8.png",
                            fullWidth: 400,
                            fullHeight: 400,
                            aspectRatio: undefined
                          }}
                        />
                      </Suggestion>
                    </React.Fragment>
                  }
                >
                  {"Who to follow"}
                </SideSection>

                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__g5Tbb)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__eErtZ)}
                  >
                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__mkR33
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Terms"}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__yTvoa
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Privacy policy"}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__rJmEa
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Cookies"}
                    </p.PlasmicLink>

                    <p.PlasmicLink
                      className={classNames(
                        projectcss.all,
                        projectcss.a,
                        projectcss.__wab_text,
                        sty.link__tneXu
                      )}
                      component={Link}
                      platform={"nextjs"}
                    >
                      {"Ads info"}
                    </p.PlasmicLink>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__cHxL)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5ZReW
                      )}
                    >
                      {"© 2021 Twitter, Inc."}
                    </div>
                  </p.Stack>
                </p.Stack>
              </p.Stack>
            ) : null}
            {(
              hasVariant(globalVariants, "screen", "desktop") ? false : true
            ) ? (
              <div className={classNames(projectcss.all, sty.freeBox__z4WFw)}>
                <ActionButton
                  className={classNames(
                    "__wab_instance",
                    sty.actionButton__t0OXt
                  )}
                  options={["medium", "primary"]}
                  slot={"25"}
                >
                  <HomeActiveIcon
                    className={classNames(projectcss.all, sty.svg__fIiU4)}
                    role={"img"}
                  />
                </ActionButton>

                <ActionButton
                  className={classNames(
                    "__wab_instance",
                    sty.actionButton__nUUzq
                  )}
                  options={["medium"]}
                  slot={"25"}
                >
                  <SearchIcon
                    className={classNames(projectcss.all, sty.svg__ikRbD)}
                    role={"img"}
                  />
                </ActionButton>

                <ActionButton
                  className={classNames(
                    "__wab_instance",
                    sty.actionButton__fxjR4
                  )}
                  options={["medium"]}
                  slot={"25"}
                >
                  <NotificationsIcon
                    className={classNames(projectcss.all, sty.svg__zl42Z)}
                    role={"img"}
                  />
                </ActionButton>

                <ActionButton
                  className={classNames(
                    "__wab_instance",
                    sty.actionButton__ae63Y
                  )}
                  options={["medium"]}
                  slot={"25"}
                >
                  <MessagesIcon
                    className={classNames(projectcss.all, sty.svg__y4InL)}
                    role={"img"}
                  />
                </ActionButton>
              </div>
            ) : null}
            {false ? (
              <p.PlasmicImg
                alt={""}
                className={classNames(sty.img__yfoIr)}
                displayHeight={"731px" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"none" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"411px" as const}
                src={{
                  src: "/plasmic/twitter/images/image.png",
                  fullWidth: 1079,
                  fullHeight: 1919,
                  aspectRatio: undefined
                }}
              />
            ) : null}
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "avatar",
    "newTweetInput",
    "tweetButton",
    "tweetList",
    "searchInput"
  ],
  avatar: ["avatar"],
  newTweetInput: ["newTweetInput"],
  tweetButton: ["tweetButton"],
  tweetList: ["tweetList"],
  searchInput: ["searchInput"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  avatar: typeof Avatar;
  newTweetInput: "textarea";
  tweetButton: typeof Button;
  tweetList: "div";
  searchInput: "input";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeed__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeed__VariantsArgs;
    args?: PlasmicFeed__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeed__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicFeed__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicFeed__ArgProps,
      internalVariantPropNames: PlasmicFeed__VariantProps
    });

    return PlasmicFeed__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeed";
  } else {
    func.displayName = `PlasmicFeed.${nodeName}`;
  }
  return func;
}

export const PlasmicFeed = Object.assign(
  // Top-level PlasmicFeed renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    newTweetInput: makeNodeComponent("newTweetInput"),
    tweetButton: makeNodeComponent("tweetButton"),
    tweetList: makeNodeComponent("tweetList"),
    searchInput: makeNodeComponent("searchInput"),

    // Metadata about props expected for PlasmicFeed
    internalVariantProps: PlasmicFeed__VariantProps,
    internalArgProps: PlasmicFeed__ArgProps
  }
);

export default PlasmicFeed;
/* prettier-ignore-end */
