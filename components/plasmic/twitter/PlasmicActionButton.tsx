// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: aFz13zrZNw9JGADAhhatpj
// Component: ZpCVL7g4OHZGW
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_twitter.module.css"; // plasmic-import: aFz13zrZNw9JGADAhhatpj/projectcss
import sty from "./PlasmicActionButton.module.css"; // plasmic-import: ZpCVL7g4OHZGW/css

import ReplyIcon from "./icons/PlasmicIcon__Reply"; // plasmic-import: GQmS_1oH8Rv5Wy/icon

export type PlasmicActionButton__VariantMembers = {
  options: "labeled" | "medium" | "primary" | "large";
};

export type PlasmicActionButton__VariantsArgs = {
  options?: MultiChoiceArg<"labeled" | "medium" | "primary" | "large">;
};

type VariantPropType = keyof PlasmicActionButton__VariantsArgs;
export const PlasmicActionButton__VariantProps = new Array<VariantPropType>(
  "options"
);

export type PlasmicActionButton__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};

type ArgPropType = keyof PlasmicActionButton__ArgsType;
export const PlasmicActionButton__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicActionButton__OverridesType = {
  root?: p.Flex<"button">;
};

export interface DefaultActionButtonProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  options?: MultiChoiceArg<"labeled" | "medium" | "primary" | "large">;
  className?: string;
}

function PlasmicActionButton__RenderFunc(props: {
  variants: PlasmicActionButton__VariantsArgs;
  args: PlasmicActionButton__ArgsType;
  overrides: PlasmicActionButton__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = Object.assign(
    {},

    props.args
  );
  const $props = args;

  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };

  return (
    <p.Stack
      as={"button"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.button,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [sty.rootoptions_labeled]: hasVariant(variants, "options", "labeled"),
          [sty.rootoptions_large]: hasVariant(variants, "options", "large"),
          [sty.rootoptions_medium]: hasVariant(variants, "options", "medium")
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox__h1ErN, {
          [sty.freeBoxoptions_large__h1ErN8QaAs]: hasVariant(
            variants,
            "options",
            "large"
          ),
          [sty.freeBoxoptions_medium__h1ErNvCz4J]: hasVariant(
            variants,
            "options",
            "medium"
          )
        })}
      >
        {(triggers.hover_root ? true : true) ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__oMqWx, {
              [sty.freeBoxoptions_labeled__oMqWXsTtYx]: hasVariant(
                variants,
                "options",
                "labeled"
              ),
              [sty.freeBoxoptions_medium__oMqWxvCz4J]: hasVariant(
                variants,
                "options",
                "medium"
              )
            })}
          />
        ) : null}
        {p.renderPlasmicSlot({
          defaultContents: (
            <ReplyIcon
              className={classNames(projectcss.all, sty.svg__jPfPz)}
              role={"img"}
            />
          ),

          value: args.children,
          className: classNames(sty.slotTargetChildren, {
            [sty.slotTargetChildrenoptions_medium]: hasVariant(
              variants,
              "options",
              "medium"
            ),
            [sty.slotTargetChildrenoptions_primary]: hasVariant(
              variants,
              "options",
              "primary"
            )
          })
        })}
      </div>

      {(hasVariant(variants, "options", "labeled") ? true : false)
        ? p.renderPlasmicSlot({
            defaultContents: "25",
            value: args.slot,
            className: classNames(sty.slotTargetSlot, {
              [sty.slotTargetSlotoptions_labeled]: hasVariant(
                variants,
                "options",
                "labeled"
              )
            })
          })
        : null}
    </p.Stack>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "button";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicActionButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicActionButton__VariantsArgs;
    args?: PlasmicActionButton__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicActionButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicActionButton__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicActionButton__ArgProps,
      internalVariantPropNames: PlasmicActionButton__VariantProps
    });

    return PlasmicActionButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActionButton";
  } else {
    func.displayName = `PlasmicActionButton.${nodeName}`;
  }
  return func;
}

export const PlasmicActionButton = Object.assign(
  // Top-level PlasmicActionButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements

    // Metadata about props expected for PlasmicActionButton
    internalVariantProps: PlasmicActionButton__VariantProps,
    internalArgProps: PlasmicActionButton__ArgProps
  }
);

export default PlasmicActionButton;
/* prettier-ignore-end */
